name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install system dependencies for pybluez
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bluetooth libbluetooth-dev

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install nox
      run: pip install nox
    
    - name: Run unit tests
      run: nox -s tests
      
    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-artifacts
        path: |
          .pytest_cache/
          *.log
        retention-days: 7

  coverage:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install system dependencies for pybluez
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bluetooth libbluetooth-dev

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install nox
      run: pip install nox
    
    - name: Run coverage
      run: nox -s coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
          .coverage
        retention-days: 30
    
    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = root.attrib.get('line-rate', '0')
            percentage = round(float(coverage) * 100, 1)
            print(f'COVERAGE_PERCENTAGE={percentage}')
        except:
            print('COVERAGE_PERCENTAGE=0')
        " | grep COVERAGE_PERCENTAGE | cut -d= -f2)
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        
        # Generate coverage summary
        echo "## üìä Code Coverage Report" > coverage_comment.md
        echo "" >> coverage_comment.md
        echo "**Coverage: ${COVERAGE}%**" >> coverage_comment.md
        echo "" >> coverage_comment.md
        
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          echo "‚úÖ Coverage meets the minimum threshold of 80%" >> coverage_comment.md
        else
          echo "‚ùå Coverage below minimum threshold of 80%" >> coverage_comment.md
        fi
        
        echo "" >> coverage_comment.md
        echo "üìÅ **Detailed Report**: Check the \`coverage-reports\` artifact for full HTML report" >> coverage_comment.md
        echo "" >> coverage_comment.md
        echo "üîç **Generated by**: Unit tests (\`nox -s coverage\`)" >> coverage_comment.md
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('coverage_comment.md', 'utf8');
          
          // Find existing coverage comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üìä Code Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: workshop_inventory_test
          MYSQL_USER: inventory_test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --character-set-server=utf8mb4
          --collation-server=utf8mb4_unicode_ci
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install nox
      run: pip install nox
    
    - name: Install system dependencies for Playwright
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 \
          libatk-bridge2.0-0 \
          libdrm2 \
          libxkbcommon0 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libxss1 \
          libasound2t64

    - name: Install system dependencies for pybluez
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bluetooth libbluetooth-dev

    - name: Wait for MariaDB to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h127.0.0.1 -P3306 -uinventory_test_user -ptest_password --silent; then
            echo "MariaDB is ready"
            break
          fi
          echo "Waiting for MariaDB... ($i/30)"
          sleep 2
        done

    - name: Set up test database
      run: |
        mysql -h127.0.0.1 -P3306 -uinventory_test_user -ptest_password workshop_inventory_test -e "SELECT 1"
        echo "Database connection verified"

    - name: Run E2E tests
      run: nox -s e2e
      env:
        # Ensure tests run in headless mode
        PLAYWRIGHT_HEADLESS: true
        # Use MariaDB for E2E tests
        USE_TEST_MARIADB: 1
        TEST_DB_HOST: 127.0.0.1
        TEST_DB_PORT: 3306
        TEST_DB_USER: inventory_test_user
        TEST_DB_PASSWORD: test_password
        TEST_DB_NAME: workshop_inventory_test
    
    - name: Upload E2E artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-artifacts
        path: |
          test-debug-output/
          test-results/
          .pytest_cache/
          *.log
          screenshots/
        retention-days: 14
        if-no-files-found: warn
    
    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-results
        path: |
          test-debug-output/
        retention-days: 7
        if-no-files-found: ignore

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, coverage, e2e-tests]
    if: always()
    
    steps:
    - name: Test Summary
      uses: actions/github-script@v6
      with:
        script: |
          const unitStatus = '${{ needs.unit-tests.result }}';
          const coverageStatus = '${{ needs.coverage.result }}';
          const e2eStatus = '${{ needs.e2e-tests.result }}';
          
          let summary = '## üß™ Test Results Summary\n\n';
          
          // Unit tests
          summary += `### Unit Tests: ${unitStatus === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED'}\n`;
          summary += `- **Python Version**: 3.13\n`;
          summary += `- **Status**: ${unitStatus}\n\n`;
          
          // Coverage
          summary += `### Coverage: ${coverageStatus === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED'}\n`;
          summary += `- **Status**: ${coverageStatus}\n\n`;
          
          // E2E tests
          summary += `### E2E Tests: ${e2eStatus === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED'}\n`;
          summary += `- **Browser**: Chromium (Playwright)\n`;
          summary += `- **Status**: ${e2eStatus}\n\n`;
          
          // Overall result
          const overallStatus = unitStatus === 'success' && coverageStatus === 'success' && e2eStatus === 'success';
          summary += `### Overall: ${overallStatus ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}\n\n`;
          
          if (!overallStatus) {
            summary += '**üîç Debug Information**: Check the artifacts for detailed failure information\n';
          }
          
          console.log(summary);
          
          // Set job summary
          await core.summary
            .addRaw(summary)
            .write();